contract Contract {
    function main() {
        memory[0x40:0x60] = 0x80;
        var var0 = msg.value;

        if (var0) { revert(memory[0x00:0x00]); }

        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }

        var0 = msg.data[0x00:0x20] >> 0xe0;

        if (var0 == 0x799320bb) {
            // Dispatch table entry for solved()
            var var1 = 0x43; // 67
            var var2 = storage[0x00] & 0xff; // 1 byte
            var temp0 = memory[0x40:0x60]; // 0x80
            memory[0x80:0x80 + 0x20] = !!var2;  // set memory to 1 byte from var2 as boolean
            var temp1 = memory[0x40:0x60];  // 0x80
        } else if (var0 == 0xb8b8d35a) {
            // Dispatch table entry for solve(uint256)
            var1 = 0x66;
            var2 = 0x62;
            var var3 = msg.data.length; // 0x24
            var var4 = 0x04;
            var2 = func_0084(var3, var4);
            func_0062(var2);
            stop();
        } else { revert(memory[0x00:0x00]); }
    }

    function func_0062(var arg0) {
        if (arg0 != 0x04) { revert(memory[0x00:0x00]); }

        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;
    }

    function solve(uint256 input) {

    }

    function func_0084(var var3, var var4) returns (var r0) {
        var var0 = 0x00;

        if (var3 - var4 i>= 0x20) { return msg.data[var4:var4 + 0x20]; }
        else { revert(memory[0x00:0x00]); }
    }
}

